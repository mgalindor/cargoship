app.name=@project.artifactId@
app.package=@project.groupId@

spring.application.name=${app.name}
server.shutdown=graceful
management.server.port=8090
spring.jmx.enabled=false

# Sleuth
spring.sleuth.trace-id128=true

# Actuator
management.endpoints.jmx.exposure.exclude=*
management.endpoints.web.exposure.include=health,info,metrics,prometheus
management.info.git.enabled=true
management.info.java.enabled=true
management.info.os.enabled=true

# If it has security preferred when-authorized
management.endpoint.health.show-components=always
management.endpoint.health.show-details=always

# Logging
logging.level.com.mk=DEBUG

# Log to see open and close transactions
logging.level.org.springframework.orm.jpa=DEBUG
logging.level.org.springframework.transaction=DEBUG



# Web
spring.jackson.default-property-inclusion=non_empty
spring.jackson.visibility.field=any
spring.jackson.visibility.getter=none
spring.jackson.visibility.setter=none
spring.jackson.visibility.is-getter=none

spring.messages.basename=i18n/exception,i18n/advice
spring.messages.fallback-to-system-locale=false

# JPA
spring.datasource.url=jdbc:postgresql://localhost:5432/claims
spring.datasource.username=user
spring.datasource.password=pa55word
spring.jpa.hibernate.ddl-auto=none
spring.jpa.open-in-view=false

spring.jpa.properties.hibernate.jdbc.batch_size=4
spring.datasource.hikari.minimum-idle=15
spring.datasource.hikari.maximum-pool-size=45


# MongoDB
spring.data.mongodb.uri=mongodb://user:pa55word@localhost:27017/documents?authSource=admin
spring.data.mongodb.password=user
spring.data.mongodb.username=pa55word

# Redis
spring.data.redis.host=localhost
spring.data.redis.port=6379
spring.data.redis.password=pa55word
spring.data.redis.jedis.pool.max-active=15
spring.data.redis.jedis.pool.min-idle=3

spring.cache.redis.time-to-live=1m

# Rest
adapter.rest.cat.url=https://meowfacts.herokuapp.com/

# Kafka Stream
spring.cloud.stream.schema-registry-client=http://localhost:8081

# Stream
spring.cloud.stream.kafka.binder.brokers=localhost:9092
spring.cloud.function.definition=deviceConsumer
spring.cloud.stream.default.contentType=application/*+avro
spring.cloud.stream.default.consumer.useNativeEncoding=true
spring.cloud.stream.default.producer.useNativeEncoding=true

## Producer
spring.cloud.stream.bindings.deviceProducer.destination=device
spring.cloud.stream.kafka.bindings.deviceProducer.producer.configuration.key.serializer=org.apache.kafka.common.serialization.StringSerializer
spring.cloud.stream.kafka.bindings.deviceProducer.producer.configuration.value.serializer=io.confluent.kafka.serializers.KafkaAvroSerializer
spring.cloud.stream.kafka.bindings.deviceProducer.producer.configuration.schema.registry.url=http://localhost:8081

## Consumer
spring.cloud.stream.bindings.deviceConsumer-in-0.destination=device
spring.cloud.stream.bindings.deviceConsumer-in-0.group=claims

spring.cloud.stream.kafka.bindings.deviceConsumer-in-0.consumer.enableDlq=false
spring.cloud.stream.kafka.bindings.deviceConsumer-in-0.consumer.configuration.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.cloud.stream.kafka.bindings.deviceConsumer-in-0.consumer.configuration.value.deserializer=io.confluent.kafka.serializers.KafkaAvroDeserializer
spring.cloud.stream.kafka.bindings.deviceConsumer-in-0.consumer.configuration.schema.registry.url=http://localhost:8081
spring.cloud.stream.kafka.bindings.deviceConsumer-in-0.consumer.configuration.specific.avro.reader=true
